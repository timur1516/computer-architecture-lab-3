    .data

input_addr:      .word  0x80             
output_addr:     .word  0x84

    .text

_start:
    movea.l     input_addr, A0                      ; Загрузка адреса входных данных
    movea.l     (A0), A0
    movea.l     output_addr, A1                     ; Загрузка адреса для вывода результата 
    movea.l     (A1), A1

    move.l      (A0), D0                            ; Чтение числа из входного адреса

    sub.l       0, D0                               ; Если число отрицательное, 
    blt         invert                              ; то делаем его положительным  
    jmp         find_sum                            ; иначе сразу переходим к сумме цифр

invert:
    not.l       D0                                  ; Изменение знака числа
    add.l       1, D0                                

find_sum:
    move.l      0, D1                               ; Иниализируем счетчик суммы цифр

cycle_start:
    
    move.l      D0, D2                              ; Копируем число в D2 для дальнейшего вычисления остатка
    beq         cycle_end                           ; Если число равно 0, завершаем цикл
    div.l       10, D0                              ; Делим число на 10
    move.l      D0, D3                              ; Сохраняем частное в D3
    mul.l       10, D3                              ; Умножаем частное на 10
    sub.l       D3, D2                              ; Вычисляем остаток от деления

    add.l       D2, D1                              ; Добавляем остаток к сумме цифр

    jmp         cycle_start                         ; Переходим к следующей итерации цикла

cycle_end:
    move.l      D1, (A1)                            ; Выводим сумму цифр в выходной адрес
    halt